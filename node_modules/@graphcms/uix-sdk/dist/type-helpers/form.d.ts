import type { SetFieldsVisibility } from '..';
export interface AnyObject {
    [key: string]: any;
}
export interface ValidationErrors extends AnyObject {
}
export interface SubmissionErrors extends AnyObject {
}
export interface FormState<FormValues, InitialFormValues = Partial<FormValues>> {
    active: undefined | keyof FormValues;
    dirty: boolean;
    dirtyFields: {
        [key: string]: boolean;
    };
    dirtyFieldsSinceLastSubmit: {
        [key: string]: boolean;
    };
    dirtySinceLastSubmit: boolean;
    error: any;
    errors: ValidationErrors;
    hasSubmitErrors: boolean;
    hasValidationErrors: boolean;
    initialValues: InitialFormValues;
    invalid: boolean;
    modified?: {
        [key: string]: boolean;
    };
    modifiedSinceLastSubmit: boolean;
    pristine: boolean;
    submitError: any;
    submitErrors: SubmissionErrors;
    submitFailed: boolean;
    submitSucceeded: boolean;
    submitting: boolean;
    touched?: {
        [key: string]: boolean;
    };
    valid: boolean;
    validating: boolean;
    values: FormValues;
    visited?: {
        [key: string]: boolean;
    };
}
export interface FieldState<FieldValue> {
    active?: boolean;
    blur: () => void;
    change: (value: FieldValue | undefined) => void;
    data?: AnyObject;
    dirty?: boolean;
    dirtySinceLastSubmit?: boolean;
    error?: any;
    focus: () => void;
    initial?: FieldValue;
    invalid?: boolean;
    length?: number;
    modified?: boolean;
    modifiedSinceLastSubmit?: boolean;
    name: string;
    pristine?: boolean;
    submitError?: any;
    submitFailed?: boolean;
    submitSucceeded?: boolean;
    submitting?: boolean;
    touched?: boolean;
    valid?: boolean;
    validating?: boolean;
    value?: FieldValue;
    visited?: boolean;
}
export interface FieldSubscription {
    active?: boolean;
    data?: boolean;
    dirty?: boolean;
    dirtySinceLastSubmit?: boolean;
    error?: boolean;
    initial?: boolean;
    invalid?: boolean;
    length?: boolean;
    modified?: boolean;
    modifiedSinceLastSubmit?: false;
    pristine?: boolean;
    submitError?: boolean;
    submitFailed?: boolean;
    submitSucceeded?: boolean;
    submitting?: boolean;
    touched?: boolean;
    valid?: boolean;
    validating?: boolean;
    value?: boolean;
    visited?: boolean;
}
export declare type Subscriber<V> = (value: V) => void;
export interface FormSubscription {
    active?: boolean;
    dirty?: boolean;
    dirtyFields?: boolean;
    dirtyFieldsSinceLastSubmit?: boolean;
    dirtySinceLastSubmit?: boolean;
    modifiedSinceLastSubmit?: boolean;
    error?: boolean;
    errors?: boolean;
    hasSubmitErrors?: boolean;
    hasValidationErrors?: boolean;
    initialValues?: boolean;
    invalid?: boolean;
    modified?: boolean;
    pristine?: boolean;
    submitError?: boolean;
    submitErrors?: boolean;
    submitFailed?: boolean;
    submitting?: boolean;
    submitSucceeded?: boolean;
    touched?: boolean;
    valid?: boolean;
    validating?: boolean;
    values?: boolean;
    visited?: boolean;
}
export declare type Form = {
    change: <Value = any>(name: string, value: Value) => Promise<void>;
    getState: <Values = Record<string, any>>() => Promise<FormState<Values>>;
    getFieldState: <Value = any>(fieldName: string) => Promise<FieldState<Value>>;
    subscribeToFieldState: <Value = any>(name: string, callback: (state: FieldState<Value>) => any, subscription: FieldSubscription) => Promise<() => any>;
    subscribeToFormState: <Values = Record<string, any>>(callback: Subscriber<FormState<Values>>, subscription: FormSubscription) => Promise<() => any>;
    setFieldsVisibility: SetFieldsVisibility;
};
