import type { ShowToast } from './type-helpers/toast';
import type { ExtensionDeclaration } from '.';
import type { FieldExtensionDeclaration } from './field';

// see https://github.com/krakenjs/zoid/blob/master/src/component/props.js#L53
export const reservedExtensionProps = [
  'timeout',
  'window',
  'close',
  'focus',
  'resize',
  'uid',
  'cspNonce',
  'getParent',
  'getParentDomain',
  'hide',
  'show',
  'export',
  'onDisplay',
  'onRendered',
  'onRender',
  'onClose',
  'onDestroy',
  'onResize',
  'onFocus',
  'onError',
  'onProps',
];

export const ExtensionPermission = {
  INPUT: 'INPUT',
  FORM: 'FORM',
  API: 'API',
} as const;

export const ExtensionType = {
  formSidebar: 'formSiderbar',
  field: 'field',
} as const;

export const ConfigType = {
  string: 'string',
  number: 'number',
  boolean: 'boolean',
} as const;

export interface IExtensionDeclaration {
  name: string;
  description?: string;
  permissions?: (keyof typeof ExtensionPermission)[];
  config?: Record<ConfigVariableName, ConfigVariableSettings>;
}

type ConfigVariableName = string;

type ConfigVariableSettings = {
  type: keyof typeof ConfigType;
  displayName?: string;
  description?: string;
  required?: boolean;
  defaultValue?: any;
};

export type ConfigFields = Record<ConfigVariableName, ConfigVariableSettings>;

export type ConfigValue = Record<
  string,
  boolean | number | string | undefined | null
>;

export interface ExtensionPropsBase<T extends ExtensionDeclaration> {
  extension: (T extends FieldExtensionDeclaration
    ? { tableConfig: ConfigValue; fieldConfig: ConfigValue }
    : { sidebarConfig: ConfigValue }) & {
    config: ConfigValue;
    status: 'connected' | 'connecting' | 'error' | 'disconnected';
  };

  isExpanded: boolean;
  expand: (expand: boolean | ((isExpanded: boolean) => boolean)) => unknown;
  context: {
    project: {
      id: string;
      name: string;
      mgmtApi: string;
      mgmtToken: string;
    };
    environment: {
      id: string;
      name: string;
      endpoint: string;
      authToken: string;
    };
  };

  openDialog: <DialogReturn = any, DialogProps = Record<string, any>>(
    src: string,
    props?: {
      disableOverlayClick?: boolean;
      maxWidth?: string;
      ariaLabel?: string;
    } & DialogProps
  ) => Promise<DialogReturn | null>;

  showToast: ShowToast;
}

export interface ExtensionDialogProps
  extends ExtensionPropsBase<ExtensionDeclaration> {
  onCloseDialog: (value: any) => void;
}
