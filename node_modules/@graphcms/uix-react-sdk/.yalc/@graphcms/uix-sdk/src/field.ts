import type { Form } from './type-helpers/form';
import type {
  IExtensionDeclaration,
  ConfigFields,
  ExtensionPropsBase,
  ConfigValue,
  ExtensionType,
} from './base';
import type { SetFieldsVisibility } from './type-helpers/visibility';
import type { Model } from './type-helpers/model';
import type {
  FocusEvent as ReactFocusEvent,
  ChangeEvent as ReactChangeEvent,
} from 'react';

export const FieldExtensionType = {
  STRING: 'STRING',
  RICHTEXT: 'RICHTEXT',
  INT: 'INT',
  FLOAT: 'FLOAT',
  BOOLEAN: 'BOOLEAN',
  JSON: 'JSON',
  DATETIME: 'DATETIME',
  DATE: 'DATE',
  LOCATION: 'LOCATION',
  COLOR: 'COLOR',
  ENUMERATION: 'ENUMERATION',
  RELATION: 'RELATION',
  ASSET: 'ASSET',
  UNION: 'UNION',
} as const;

export const FieldExtensionFeature = {
  FieldRenderer: 'FieldRenderer',
  ListRenderer: 'ListRenderer',
  TableRenderer: 'TableRenderer',
} as const;

export interface Asset {
  createdAt: string;
  fileName: string;
  handle: string;
  height?: number;
  id: string;
  mimeType?: string;
  size?: number;
  updatedAt: string;
  url: string;
  width?: number;
}

export interface FieldExtensionDeclaration extends IExtensionDeclaration {
  extensionType: typeof ExtensionType.field;
  fieldType: keyof typeof FieldExtensionType;
  /**
   * Extension capabilities
   */
  features: (keyof typeof FieldExtensionFeature)[];
  fieldConfig?: ConfigFields;
  listConfig?: ConfigFields;
  tableConfig?: ConfigFields;
}

export interface FieldExtensionProps
  extends ExtensionPropsBase<FieldExtensionDeclaration> {
  // name of the field in the form (may differ from the field apiId, ie. for localized fields)
  name: string;

  // current locale on localized field
  locale?: string;

  // current entry id, null for new entries;
  entryId: string | null;

  isTableCell: boolean;

  isReadOnly?: boolean;

  value: any;

  onBlur: <T extends FocusEvent | ReactFocusEvent>(event?: T) => Promise<void>;

  onChange: <T extends InputEvent | ReactChangeEvent>(
    event: T | any
  ) => Promise<void>;

  onFocus: <T extends FocusEvent | ReactFocusEvent>(event?: T) => Promise<void>;

  // @see https://final-form.org/docs/react-final-form/types/FieldRenderProps
  meta: {
    active: boolean;
    error: any;
    touched: boolean;
  };

  /**
   * @deprecated use `expand` instead
   */
  expandField?: (expand: boolean) => unknown;

  openAssetPicker: () => Promise<null | (Asset & Record<string, unknown>)>;

  form: Form;
  field: {
    id: string;
    apiId: string;
    description: string | null;
    displayName: string;
    isList: boolean;
    isLocalized?: boolean;
    isRequired?: boolean;
    isUnique?: boolean;
    type: keyof typeof FieldExtensionType;
  };
  model: Model;
  /**
   * @deprecated Please use {@link Form.setFieldsVisibility}
   */
  setFieldsVisibility: SetFieldsVisibility;
  /**
   * @deprecated Please use {@link ExtensionPropsBase.extension extension.fieldConfig}
   */
  fieldConfig?: ConfigValue;
  /**
   * @deprecated Please use {@link ExtensionPropsBase.extension extension.tableConfig}
   */
  tableConfig?: ConfigValue;
}
