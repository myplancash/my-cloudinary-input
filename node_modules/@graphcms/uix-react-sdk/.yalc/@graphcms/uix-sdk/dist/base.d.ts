import type { ShowToast } from './type-helpers/toast';
import type { ExtensionDeclaration } from '.';
import type { FieldExtensionDeclaration } from './field';
export declare const reservedExtensionProps: string[];
export declare const ExtensionPermission: {
    readonly INPUT: "INPUT";
    readonly FORM: "FORM";
    readonly API: "API";
};
export declare const ExtensionType: {
    readonly formSidebar: "formSiderbar";
    readonly field: "field";
};
export declare const ConfigType: {
    readonly string: "string";
    readonly number: "number";
    readonly boolean: "boolean";
};
export interface IExtensionDeclaration {
    name: string;
    description?: string;
    permissions?: (keyof typeof ExtensionPermission)[];
    config?: Record<ConfigVariableName, ConfigVariableSettings>;
}
declare type ConfigVariableName = string;
declare type ConfigVariableSettings = {
    type: keyof typeof ConfigType;
    displayName?: string;
    description?: string;
    required?: boolean;
    defaultValue?: any;
};
export declare type ConfigFields = Record<ConfigVariableName, ConfigVariableSettings>;
export declare type ConfigValue = Record<string, boolean | number | string | undefined | null>;
export interface ExtensionPropsBase<T extends ExtensionDeclaration> {
    extension: (T extends FieldExtensionDeclaration ? {
        tableConfig: ConfigValue;
        fieldConfig: ConfigValue;
    } : {
        sidebarConfig: ConfigValue;
    }) & {
        config: ConfigValue;
        status: 'connected' | 'connecting' | 'error' | 'disconnected';
    };
    isExpanded: boolean;
    expand: (expand: boolean | ((isExpanded: boolean) => boolean)) => unknown;
    context: {
        project: {
            id: string;
            name: string;
            mgmtApi: string;
            mgmtToken: string;
        };
        environment: {
            id: string;
            name: string;
            endpoint: string;
            authToken: string;
        };
    };
    openDialog: <DialogReturn = any, DialogProps = Record<string, any>>(src: string, props?: {
        disableOverlayClick?: boolean;
        maxWidth?: string;
        ariaLabel?: string;
    } & DialogProps) => Promise<DialogReturn | null>;
    showToast: ShowToast;
}
export interface ExtensionDialogProps extends ExtensionPropsBase<ExtensionDeclaration> {
    onCloseDialog: (value: any) => void;
}
export {};
