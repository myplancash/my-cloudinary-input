import React from 'react';
import { init } from '@graphcms/uix-sdk';
import type {
  ExtensionDeclaration,
  ExtensionDialogProps,
  FormSidebarExtensionProps,
  FieldExtensionProps,
  DeclarationRelativeProps,
} from '@graphcms/uix-sdk';

export type WrapperProps<T extends ExtensionDeclaration> = {
  uid?: string;
  declaration: T;
  fallback?: React.FC<{ state: ExtensionState }>;
  debug?: boolean;
};

export type ExtensionState = 'init' | 'error' | 'ok' | 'validation';

type ExtensionContextType =
  | FieldExtensionProps
  | FormSidebarExtensionProps
  | (ExtensionDialogProps & Record<string, unknown>);

const ExtensionContext = React.createContext<ExtensionContextType>(
  {} as ExtensionContextType
);

export function Wrapper<T extends ExtensionDeclaration>(
  props: WrapperProps<T> & {
    children: React.ReactNode;
  }
) {
  const {
    children,
    uid,
    declaration,
    fallback: FallbackComponent = DefaultFallbackComponent,
    debug,
  } = props;

  const [extensionProps, setExtensionProps] = React.useState<
    DeclarationRelativeProps<T>
  >();

  const [extensionState, setExtensionState] = React.useState<ExtensionState>(
    'init'
  );

  React.useEffect(() => {
    async function initSdk() {
      try {
        const initialState = await init<T>({
          uid,
          debug,
          declaration,
          onProps: props => {
            setExtensionProps(props);
          },
        });
        if (initialState.status === 'ok') {
          setExtensionProps(initialState.props);
        }
        setExtensionState(initialState.status);
      } catch (error) {
        setExtensionState('error');
        console.error(error);
      }
    }
    initSdk();
  }, [uid]);

  return extensionState !== 'ok' || !extensionProps ? (
    <FallbackComponent state={extensionState} />
  ) : (
    <ExtensionContext.Provider value={extensionProps} children={children} />
  );
}

export function useWrapperContext() {
  return React.useContext(ExtensionContext);
}

function DefaultFallbackComponent({ state }: { state: ExtensionState }) {
  return (
    <p>
      {state === 'error'
        ? 'SDK connection error, check logs'
        : 'Waiting for connection'}
    </p>
  );
}
